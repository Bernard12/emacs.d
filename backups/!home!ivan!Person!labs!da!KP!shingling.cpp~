#include "./shingling.hpp"

KShingle::KShingle(const std::string& str,int slice):k(slice){
    std::string tmp = "";
    int counter = 0;
    for(int i = 0 ; i < (int)str.size();i++){
        tmp+=str[i];
        counter++;
        if(counter == k){
            st.insert(tmp);
            tmp = "";
            counter = 0;
        }
    }
}

KShingle::KShingle(const std::vector<std::string>& strings,int slice):k(slice){
    std::string tmp = "";
    int counter = 0;
    for(std::string item : strings){
        for(int i = 0 ; i < (int)item.size();i++){
            tmp+=item[i];
            counter++;
            if(counter == k){
                st.insert(tmp);
                tmp = "";
                counter = 0;
            }
        }
    }
}

void KShingle::printShingls(){
    std::cout << "Items: ";
    for(std::string item : st){
        std::cout << item << ' ';
    }
    std::cout << '\n';
}

std::set<std::string> KShingle::getObjectSet() const{
    return this->st;
}

double KShingle::similarity(const KShingle* other){
    std::set<std::string> unions(this->getObjectSet());
    std::set<std::string> intersection;
    std::set_intersection(st.begin(),
                          st.end(),
                          other->getObjectSet().begin(),
                          other->getObjectSet().end(),
                          std::inserter(intersection,intersection.begin()));
    std::set<std::string> otherSet(other->getObjectSet());
    unions.insert(otherSet.begin(),otherSet.end());
    double result = ((double)intersection.size())/unions.size();
    return result;
}
